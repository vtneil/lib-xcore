#ifndef LIB_XCORE_INCLUDE_MATH_MODULE_H
#define LIB_XCORE_INCLUDE_MATH_MODULE_H

#include "core/ported_std.hpp"

#include "linalg/numeric_vector.hpp"
#include "linalg/numeric_matrix.hpp"

LIB_XCORE_BEGIN_NAMESPACE

namespace detail {
  template<typename T, size_t N>
  struct integral_coefficient_helper {
    static constexpr real_t value = (1.0 / static_cast<real_t>(N + 1)) * integral_coefficient_helper<T, N - 1>::value;
  };

  template<typename T>
  struct integral_coefficient_helper<T, 1> {
    static constexpr real_t value = 0.5;
  };
}  // namespace detail

template<size_t N>
constexpr real_t integral_coefficient() {
  return LIB_XCORE_NAMESPACE::detail::integral_coefficient_helper<real_t, N>::value;
}

LIB_XCORE_END_NAMESPACE

#endif  //LIB_XCORE_INCLUDE_MATH_MODULE_H